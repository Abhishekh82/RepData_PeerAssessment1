install.packages("KernSmooth")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
getwd()
setwd("specdata")
setwd(specdata)
setwd("madrun")
library(xlsx)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
str(tojson)
str(toJSON)
?`toJSON, fromJSON`
?%>%
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
siwrl(0)
swirl()
library(dplyr)
cran<- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<- group_by(cran, package)
by_package
summarize(by_package, mean(size))
bye()
swirl()
source('C:/Users/Meenal/AppData/Local/Temp/RtmpmcAybm/summarize1.R')
source('C:/Users/Meenal/AppData/Local/Temp/RtmpmcAybm/summarize1.R')
submit()
?n
?n_distinct()
?n
submit()
source('C:/Users/Meenal/AppData/Local/Temp/RtmpmcAybm/summarize1.R')
source('C:/Users/Meenal/AppData/Local/Temp/RtmpmcAybm/summarize1.R')
submit(summarize1)
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top+counts<- filter(pack_sum, count > 679)
top_counts<- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted<- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<- filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted< - arrange(top_unique, desc(unique))
top_unique_sorted<- arrange(top_unique, desc(unique))
View(tio_unique_sorted)
View(tip_unique_sorted)
View(top_unique_sorted)
bye()
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
Ses.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
package=lubirdate
package=lubridate
help(package=lubridate)
this_day<- today()
this_day
year(this_date)
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<- now()
this_moment
q()
install.packages("dplyr")
library("dplyr")
library(dplyr)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
##############################################################################
#
#   The Goal is to prepare tidy data file "tidy_data.txt" from
#   source https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
#   that can be used for later analysis
#
##############################################################################
## Library used
library(dplyr)
##############################################################################
# Download and Unzip dataset from source
##############################################################################
# download zip file containing data if it hasn't already been downloaded
zipUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipFile <- "UCI HAR Dataset.zip"
if (!file.exists(zipFile)) {
download.file(zipUrl, zipFile, mode = "wb")
}
# unzip zip file containing data if data directory doesn't already exist
dataPath <- "UCI HAR Dataset"
if (!file.exists(dataPath)) {
unzip(zipFile)
}
##############################################################################
# Read Training and Test dataset
##############################################################################
# read training dataset
trainingSubjects <- read.table(file.path(dataPath, "train", "subject_train.txt"))
trainingValues <- read.table(file.path(dataPath, "train", "X_train.txt"))
trainingActivity <- read.table(file.path(dataPath, "train", "y_train.txt"))
# read test dataset
testSubjects <- read.table(file.path(dataPath, "test", "subject_test.txt"))
testValues <- read.table(file.path(dataPath, "test", "X_test.txt"))
testActivity <- read.table(file.path(dataPath, "test", "y_test.txt"))
##############################################################################
# Read Supporting Metadata
##############################################################################
# read features, don't convert text labels to factors
features <- read.table(file.path(dataPath, "features.txt"), as.is = TRUE)
# read activity labels
activities <- read.table(file.path(dataPath, "activity_labels.txt"))
colnames(activities) <- c("activityId", "activityLabel")
##############################################################################
# Look at the properties of the above variable to understand the data structure
##############################################################################
str(trainingSubjects)
str(trainingValues)
str(trainingActivity)
str(testSubjects)
str(testValues)
str(testActivity)
##############################################################################
# 1 - Merge the training and the test sets to create one data set
##############################################################################
# concatenate individual data tables to make single data table
humanActivity <- rbind(
cbind(trainingSubjects, trainingValues, trainingActivity),
cbind(testSubjects, testValues, testActivity)
)
# remove individual data tables to save memory
rm(trainingSubjects, trainingValues, trainingActivity,
testSubjects, testValues, testActivity)
# assign column names
colnames(humanActivity) <- c("subject", features[, 2], "activity")
##############################################################################
# 2 - Extract only the measurements on the mean and standard deviation
#          for each measurement
##############################################################################
# determine columns of data set to keep based on column name...
columnsToKeep <- grepl("subject|activity|mean|std", colnames(humanActivity))
# ... and keep data in these columns only
humanActivity <- humanActivity[, columnsToKeep]
##############################################################################
# 3 - Use descriptive activity names to name the activities in the data
#          set
##############################################################################
# replace activity values with named factor levels
humanActivity$activity <- factor(humanActivity$activity,
levels = activities[, 1], labels = activities[, 2])
##############################################################################
# 4 - Appropriately label the data set with descriptive variable names
##############################################################################
# get column names
humanActivityCols <- colnames(humanActivity)
# remove special characters
humanActivityCols <- gsub("[\\(\\)-]", "", humanActivityCols)
# expand abbreviations and clean up names
humanActivityCols <- gsub("^f", "frequencyDomain", humanActivityCols)
humanActivityCols <- gsub("^t", "timeDomain", humanActivityCols)
humanActivityCols <- gsub("Acc", "Accelerometer", humanActivityCols)
humanActivityCols <- gsub("Gyro", "Gyroscope", humanActivityCols)
humanActivityCols <- gsub("Mag", "Magnitude", humanActivityCols)
humanActivityCols <- gsub("Freq", "Frequency", humanActivityCols)
humanActivityCols <- gsub("mean", "Mean", humanActivityCols)
humanActivityCols <- gsub("std", "StandardDeviation", humanActivityCols)
# correct typo
humanActivityCols <- gsub("BodyBody", "Body", humanActivityCols)
# use new labels as column names
colnames(humanActivity) <- humanActivityCols
##############################################################################
# 5 - Create a second, independent tidy set with the average of each
#          variable for each activity and each subject
##############################################################################
# group by subject and activity and summarise using mean
humanActivityMeans <- humanActivity %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
# output to file "tidy_data.txt"
write.table(humanActivityMeans, "tidy_data.txt", row.names = FALSE,
quote = FALSE)
##############################################################################
# tidy_data.txt
##############################################################################
tidydata<-read.table("tidy_data.txt",head=TRUE)
dim(tidydata)
swirl()
install.packages("Swirl")
install.packages("swirl")
library(swirl)
swirl(0)
head(airquality)
xyplot(Ozone~Wind,data = airquality)
xyplot(Ozone~Wind,data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind,data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(month),data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | as.factor(Month),data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month,data = airquality, layout = c(5,1))
p<- xyplot(Ozone~Wind,data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("mylabels.R")
myedit("myLabels.R")
pathtofile("myLabels.R", local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~cut|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors, 10)
sample(colors(), 10)
pal<- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1, len = 6))
p1<- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
p2<- colorRampPalette("red", "yellow")
p2<- colorRampPalette(c("red", "yellow")
)
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch =19, col = rgb(0,0.5, 0.5))
plot(x, y, pch =19, col = rgb(0,0.5, 0.5, 0.3))
cols<- brewer.pal(3, "BuGn")
showMe(cols)
pal<- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col= drv)
qplot(displ, hwy, data = mpg, color= drv)
qplot(displ, hwy, data = mpg, color= drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color= drv)
qplot(y = hwy, data = mpg, color= drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, aes(drv))
qplot(hwy, data = mpg, fil = aes(drv))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv
)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
library(swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
cluster(distxy)
hc<- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendogram(hc))
plot(hc, as.dendogram(hc))
plot(dendogram(hc))
as.dendogram(hc)
plot(as.dendogram(hc))
plot(hc)
plot(as.dendogram(hc))
?as.dendrogram
plot(as.dendrogram(hc))
abline(h= 1.5, col= "blue")
abline(h= 0.4, col= "red")
4
5
abline(h= 0.05)
abline(h= .05)
abline(h= .05)
12
abline(h= .05)
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
if (!file.exists("Course51")) {
dir.create("Course51")
}
setwd(paste(getwd(), "Course51", sep = "/"))
myurl<- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(myurl, paste(getwd(), "data.zip", sep = "/"))
unzip(data.zip)
activity<- read.csv("activity.csv")
library(ggplot2)
library(dplyr)
t1<- aggregate(steps~date, activity, sum)
g<- ggplot(t1, aes(t1$steps))
g+geom_histogram(fill="blue", color= "white")+ labs(x = "steps/day", y= "count")+theme_bw()
mean(t1$steps)
median(t1$steps)
t2<- aggregate(steps~interval, activity, mean)
g1<- ggplot(t2, aes(interval, steps))
g1+geom_line(color ="blue")
t2$interval[which(max(t2$steps)== t2$steps)]
sum(is.na(activity$steps))
t2<- rename(t2, "avgsteps" = "steps")
activitynew<- merge(activity, t2, all = TRUE)
for (i in 1:length(activitynew$steps)) {
if (is.na(activitynew$steps)[i]== TRUE) {
activitynew$steps[i]<- activitynew$avgsteps[i]
i= i+1
} else {i = i+1}}
t1<- aggregate(steps~date, activitynew, sum)
g<- ggplot(t1, aes(t1$steps))
g+geom_histogram(fill="blue", color= "white")+ labs(x = "steps/day", y= "count")+theme_bw()
activitynew$date<- as.Date(activitynew$date, "%Y-%m-%d")
activitynew$Week<- ifelse(weekdays(activitynew$date)== "Sunday"|weekdays(activitynew$date)== "Saturday", "weekend", "weekday")
t3<-aggregate(steps~interval+Week, activitynew, mean)
g1<- ggplot(t3, aes(interval, steps))
g1+geom_line()+facet_grid(Week~.)
getwd()
list.files()
unzip(data.zip)
unzip(data)
unzip("data.zip")
activity<- read.csv("activity.csv")
library(ggplot2)
library(dplyr)
t1<- aggregate(steps~date, activity, sum)
g<- ggplot(t1, aes(t1$steps))
g+geom_histogram(fill="blue", color= "white")+ labs(x = "steps/day", y= "count")+theme_bw()
mean(t1$steps)
median(t1$steps)
t2<- aggregate(steps~interval, activity, mean)
g1<- ggplot(t2, aes(interval, steps))
g1+geom_line(color ="blue")
t2$interval[which(max(t2$steps)== t2$steps)]
sum(is.na(activity$steps))
t2<- rename(t2, "avgsteps" = "steps")
activitynew<- merge(activity, t2, all = TRUE)
for (i in 1:length(activitynew$steps)) {
if (is.na(activitynew$steps)[i]== TRUE) {
activitynew$steps[i]<- activitynew$avgsteps[i]
i= i+1
} else {i = i+1}}
t1<- aggregate(steps~date, activitynew, sum)
g<- ggplot(t1, aes(t1$steps))
g+geom_histogram(fill="blue", color= "white")+ labs(x = "steps/day", y= "count")+theme_bw()
activitynew$date<- as.Date(activitynew$date, "%Y-%m-%d")
activitynew$Week<- ifelse(weekdays(activitynew$date)== "Sunday"|weekdays(activitynew$date)== "Saturday", "weekend", "weekday")
t3<-aggregate(steps~interval+Week, activitynew, mean)
g1<- ggplot(t3, aes(interval, steps))
g1+geom_line()+facet_grid(Week~.)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
if (!file.exists("Course51")) {
dir.create("Course51")
}
setwd(paste(getwd(), "Course51", sep = "/"))
setwd("~/Coursera/quiz1_data")
myurl<- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(myurl, paste(getwd(), "data.zip", sep = "/"))
myurl<- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(myurl, paste(getwd(), "data.zip", sep = "/"))
unzip("data.zip")
activity<- read.csv("activity.csv")
setwd("~/Course51")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
knit2html()
knit2html()
knit2html("PA1_template.rmd")
render("PA1_template.rmd")
install.packages("rmarkdown")
library(rmarkdown)
render("PA1_template.rmd")
render("PA1_template.rmd")
knit2html("PA1_template.rmd")
setwd("~/Coursera/Course51")
knit2html("PA1_template.rmd")
setwd("~/Course51")
knit2html("PA1_template.rmd")
knit2html("PA1_template.rmd", output = NULL)
knit("PA1_template.rmd")
